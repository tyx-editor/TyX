import { TyXDocument, TyXDocumentSettings } from "../models"
import tiptap2typst from "./tiptap2typst"

const setProperty = (
  element: string,
  attribute: string,
  setting: any,
  transform: ((v: any) => string) | null = JSON.stringify,
) => {
  transform = transform ?? ((v) => v)

  if (setting !== undefined) {
    return `#set ${element}(${attribute}: ${transform(setting)})\n`
  }
  return ""
}

export const tyxSettings2typst = (settings: TyXDocumentSettings) => {
  let result = ""
  result += setProperty("page", "paper", settings.paper)
  result += setProperty("page", "flipped", settings.flipped)
  result += setProperty("page", "columns", settings.columns, null)
  result += setProperty("text", "lang", settings.language)
  result += setProperty("par", "justify", settings.justified)
  if (
    settings.indentation?.unit !== undefined &&
    settings.indentation?.value !== undefined
  ) {
    result += setProperty(
      "par",
      "first-line-indent",
      settings.indentation.value + settings.indentation.unit,
      null,
    )
  }
  return result
}

const tyx2typst = (
  document: TyXDocument,
  version: string | undefined = undefined,
) => {
  let content = `// Automatically generated by TyX${version ? " " + version : ""}.

// Settings
#metadata(json(bytes(${JSON.stringify(
    JSON.stringify(document.settings ?? {}),
  )}))) <tyx-settings>
${tyxSettings2typst(document.settings ?? {})}
`
  if (document.preamble) {
    content += `// Preamble
${document.preamble}

`
  }
  content += "// Content\n" + tiptap2typst(document.content)
  return content
}

export default tyx2typst
