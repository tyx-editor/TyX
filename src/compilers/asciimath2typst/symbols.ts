enum TokenTypes {
  NumberLiteral = "NumberLiteral",
  StringLiteral = "StringLiteral",
  Text = "Text",
  Const = "Const",
  OperatorOA = "OperatorA", // abs(a)
  OperatorOAB = "OperatorOAB", // frac(a)(b)
  OperatorAOB = "OperatorAOB", // div
  OperatorMinus = "OperatorMinus", // "e"^-x
  OperatorAO = "OperatorAO", // n!, n!!
  OperatorO2 = "OperatorOptionalTwoParams",
  OperatorSup = "OperatorSup", // a^n, a_n
  OperatorPartial = "OperatorPartial",
  LParen = "LParen",
  RParen = "RParen",
  Paren = "Paren",
  Align = "Align",
  Split = "Split",
  None = "None",
}

interface SymbolValueType {
  type: TokenTypes
  typst: string
  eatNext?: boolean
}

const SYMBOLMAP: Map<string, SymbolValueType> = new Map([
  ["alpha", { type: TokenTypes.Const, typst: "alpha" }],
  ["beta", { type: TokenTypes.Const, typst: "beta" }],
  ["gamma", { type: TokenTypes.Const, typst: "gamma" }],
  ["Gamma", { type: TokenTypes.Const, typst: "Gamma" }],
  ["delta", { type: TokenTypes.Const, typst: "delta" }],
  ["Delta", { type: TokenTypes.Const, typst: "Delta" }],
  ["epsi", { type: TokenTypes.Const, typst: "epsilon" }],
  ["epsilon", { type: TokenTypes.Const, typst: "epsilon.alt" }],
  ["varepsilon", { type: TokenTypes.Const, typst: "epsilon" }],
  ["zeta", { type: TokenTypes.Const, typst: "zeta" }],
  ["eta", { type: TokenTypes.Const, typst: "eta" }],
  ["theta", { type: TokenTypes.Const, typst: "theta" }],
  ["Theta", { type: TokenTypes.Const, typst: "Theta" }],
  ["vartheta", { type: TokenTypes.Const, typst: "theta.alt" }],
  ["iota", { type: TokenTypes.Const, typst: "iota" }],
  ["kappa", { type: TokenTypes.Const, typst: "kappa" }],
  ["lambda", { type: TokenTypes.Const, typst: "lambda" }],
  ["Lambda", { type: TokenTypes.Const, typst: "Lambda" }],
  ["mu", { type: TokenTypes.Const, typst: "mu" }],
  ["nu", { type: TokenTypes.Const, typst: "nu" }],
  ["xi", { type: TokenTypes.Const, typst: "xi" }],
  ["Xi", { type: TokenTypes.Const, typst: "Xi" }],
  ["pi", { type: TokenTypes.Const, typst: "pi" }],
  ["Pi", { type: TokenTypes.Const, typst: "Pi" }],
  ["rho", { type: TokenTypes.Const, typst: "rho" }],
  ["sigma", { type: TokenTypes.Const, typst: "sigma" }],
  ["Sigma", { type: TokenTypes.Const, typst: "Sigma" }],
  ["tau", { type: TokenTypes.Const, typst: "tau" }],
  ["upsilon", { type: TokenTypes.Const, typst: "upsilon" }],
  ["phi", { type: TokenTypes.Const, typst: "phi.alt" }],
  ["varphi", { type: TokenTypes.Const, typst: "phi" }],
  ["varPhi", { type: TokenTypes.Const, typst: "Phi" }],
  ["Phi", { type: TokenTypes.Const, typst: "Phi" }],
  ["chi", { type: TokenTypes.Const, typst: "chi" }],
  ["psi", { type: TokenTypes.Const, typst: "psi" }],
  ["Psi", { type: TokenTypes.Const, typst: "Psi" }],
  ["omega", { type: TokenTypes.Const, typst: "omega" }],
  ["Omega", { type: TokenTypes.Const, typst: "Omega" }],
  ["***", { type: TokenTypes.Const, typst: "star.op" }],
  ["star", { type: TokenTypes.Const, typst: "star.op" }],
  ["**", { type: TokenTypes.Const, typst: "ast.op" }],
  ["ast", { type: TokenTypes.Const, typst: "ast.op" }],
  ["*", { type: TokenTypes.Const, typst: "dot.op" }],
  ["cdot", { type: TokenTypes.Const, typst: "dot.op" }],
  ["//", { type: TokenTypes.Const, typst: "slash" }],
  ["\\\\", { type: TokenTypes.Const, typst: "backslash" }],
  ["setminus", { type: TokenTypes.Const, typst: "without" }],
  ["xx", { type: TokenTypes.Const, typst: "times" }],
  ["|><", { type: TokenTypes.Const, typst: "times.l" }],
  ["><|", { type: TokenTypes.Const, typst: "times.r" }],
  ["|><|", { type: TokenTypes.Const, typst: "join" }],
  ["-:", { type: TokenTypes.Const, typst: "div" }],
  ["@", { type: TokenTypes.Const, typst: "circle.stroked" }],
  ["o+", { type: TokenTypes.Const, typst: "plus.circle" }],
  ["ox", { type: TokenTypes.Const, typst: "times.circle" }],
  ["o.", { type: TokenTypes.Const, typst: "dot.circle" }],
  ["sum", { type: TokenTypes.Const, typst: "sum" }],
  ["prod", { type: TokenTypes.Const, typst: "product" }],
  ["^^", { type: TokenTypes.Const, typst: "and" }],
  ["^^^", { type: TokenTypes.Const, typst: "and.big" }],
  ["vv", { type: TokenTypes.Const, typst: "or" }],
  ["vvv", { type: TokenTypes.Const, typst: "or.big" }],
  ["nn", { type: TokenTypes.Const, typst: "inter" }],
  ["nnn", { type: TokenTypes.Const, typst: "inter.big" }],
  ["uu", { type: TokenTypes.Const, typst: "union" }],
  ["uuu", { type: TokenTypes.Const, typst: "union.big" }],
  ["!=", { type: TokenTypes.Const, typst: "eq.not" }],
  ["lt", { type: TokenTypes.Const, typst: "<" }],
  ["<=", { type: TokenTypes.Const, typst: "lt.eq.slant" }],
  ["le", { type: TokenTypes.Const, typst: "lt.eq" }],
  ["gt", { type: TokenTypes.Const, typst: ">" }],
  [">=", { type: TokenTypes.Const, typst: "gt.eq.slant" }],
  ["ge", { type: TokenTypes.Const, typst: "gt.eq" }],
  ["-<", { type: TokenTypes.Const, typst: "prec" }],
  [">-", { type: TokenTypes.Const, typst: "succ" }],
  ["-<=", { type: TokenTypes.Const, typst: "prec.eq" }],
  [">-=", { type: TokenTypes.Const, typst: "succ.eq" }],
  ["in", { type: TokenTypes.Const, typst: "in" }],
  ["!in", { type: TokenTypes.Const, typst: "in.not" }],
  ["sub", { type: TokenTypes.Const, typst: "subset" }],
  ["sup", { type: TokenTypes.Const, typst: "supset" }],
  ["sube", { type: TokenTypes.Const, typst: "subset.eq" }],
  ["supe", { type: TokenTypes.Const, typst: "supset.eq" }],
  ["-=", { type: TokenTypes.Const, typst: "equiv" }],
  ["~=", { type: TokenTypes.Const, typst: "tilde.equiv" }],
  ["~", { type: TokenTypes.Const, typst: "tilde.op" }],
  ["~~", { type: TokenTypes.Const, typst: "approx" }],
  ["\\#", { type: TokenTypes.Const, typst: "\\#" }],
  ["\\&", { type: TokenTypes.Const, typst: "\\&" }],
  ["\\@", { type: TokenTypes.Const, typst: "\\@" }],
  ["\\%", { type: TokenTypes.Const, typst: "\\%" }],
  ["%", { type: TokenTypes.Const, typst: "\\%" }],
  ["\\_", { type: TokenTypes.Const, typst: "\\_" }],
  ["\\^", { type: TokenTypes.Const, typst: "\\^" }],
  ["\\$", { type: TokenTypes.Const, typst: "\\$" }],
  ["\\ ", { type: TokenTypes.Const, typst: "\\ " }],
  ["\\,", { type: TokenTypes.Const, typst: "\\," }],
  ["\\;", { type: TokenTypes.Const, typst: "\\;" }],
  ["\\:", { type: TokenTypes.Const, typst: "\\:" }],
  ["\\!", { type: TokenTypes.Const, typst: "\\!" }],
  ["enspace", { type: TokenTypes.Const, typst: "space.en" }],
  ["hspace", { type: TokenTypes.OperatorOA, typst: "#h{$1}", eatNext: true }],
  ["prop", { type: TokenTypes.Const, typst: "prop" }],
  ["comp", { type: TokenTypes.Const, typst: "complement" }],
  ["complement", { type: TokenTypes.Const, typst: "complement" }],

  ["if", { type: TokenTypes.Text, typst: '"if" space.quad' }],
  ["otherwise", { type: TokenTypes.Text, typst: '"otherwise" space.quad' }],
  ["and", { type: TokenTypes.Text, typst: ' "and" ' }],
  ["or", { type: TokenTypes.Text, typst: ' "or" ' }],
  ["not", { type: TokenTypes.Const, typst: "not" }],
  ["=>", { type: TokenTypes.Const, typst: "arrow.r.double" }],
  ["~>", { type: TokenTypes.Const, typst: "arrow.r.squiggly" }],
  ["-/->", { type: TokenTypes.Const, typst: "arrow.r.not" }],
  ["<-/-", { type: TokenTypes.Const, typst: "arrow.l.not" }],
  ["<-/->", { type: TokenTypes.Const, typst: "arrow.l.r.not" }],
  ["<=>", { type: TokenTypes.Const, typst: "arrow.l.r.double.long" }],
  ["iff", { type: TokenTypes.Const, typst: "arrow.l.r.double.long" }],
  ["AA", { type: TokenTypes.Const, typst: "forall" }],
  ["EE", { type: TokenTypes.Const, typst: "exists" }],
  ["_|_", { type: TokenTypes.Const, typst: "bot" }],
  ["TT", { type: TokenTypes.Const, typst: "top" }],
  ["|--", { type: TokenTypes.Const, typst: "tack.r" }],
  ["|==", { type: TokenTypes.Const, typst: "tack.r.double" }],

  ["int", { type: TokenTypes.Const, typst: "integral" }],
  ["oint", { type: TokenTypes.Const, typst: "integral.cont" }],
  ["del", { type: TokenTypes.Const, typst: "partial" }],
  ["grad", { type: TokenTypes.Const, typst: "nabla" }],
  ["+-", { type: TokenTypes.Const, typst: "plus.minus" }],
  ["-+", { type: TokenTypes.Const, typst: "minus.plus" }],
  ["O/", { type: TokenTypes.Const, typst: "nothing" }],
  ["oo", { type: TokenTypes.Const, typst: "infinity" }],
  ["aleph", { type: TokenTypes.Const, typst: "aleph" }],
  ["...", { type: TokenTypes.Const, typst: "ldots" }],
  [":.", { type: TokenTypes.Const, typst: "therefore" }],
  [":'", { type: TokenTypes.Const, typst: "because" }],
  ["/_", { type: TokenTypes.Const, typst: "angle" }],
  ["/_\\", { type: TokenTypes.Const, typst: "triangle.stroked.t" }],
  ["quad", { type: TokenTypes.Const, typst: "space.quad" }],
  ["qquad", { type: TokenTypes.Const, typst: "space.quad space.quad" }],
  ["cdots", { type: TokenTypes.Const, typst: "dots.h.c" }],
  ["vdots", { type: TokenTypes.Const, typst: "dots.v" }],
  ["ddots", { type: TokenTypes.Const, typst: "dots.down" }],
  ["diamond", { type: TokenTypes.Const, typst: "diamond.small" }],
  // TODO: fixme
  ["Lap", { type: TokenTypes.Const, typst: "L" }],
  ["square", { type: TokenTypes.Const, typst: "square" }],
  ["|__", { type: TokenTypes.LParen, typst: "floor.l" }],
  ["__|", { type: TokenTypes.RParen, typst: "floor.r" }],
  ["|~", { type: TokenTypes.LParen, typst: "ceil.l" }],
  ["~|", { type: TokenTypes.RParen, typst: "ceil.r" }],
  ["CC", { type: TokenTypes.Const, typst: "bb(C)" }],
  ["NN", { type: TokenTypes.Const, typst: "bb(N)" }],
  ["QQ", { type: TokenTypes.Const, typst: "bb(Q)" }],
  ["RR", { type: TokenTypes.Const, typst: "bb(R)" }],
  ["ZZ", { type: TokenTypes.Const, typst: "bb(Z)" }],
  ["'", { type: TokenTypes.Const, typst: "^prime" }],
  ["''", { type: TokenTypes.Const, typst: "^prime.double" }],
  ["'''", { type: TokenTypes.Const, typst: "^prime.triple" }],
  ["lim", { type: TokenTypes.Const, typst: "lim" }],
  ["sin", { type: TokenTypes.Const, typst: "sin" }],
  ["cos", { type: TokenTypes.Const, typst: "cos" }],
  ["tan", { type: TokenTypes.Const, typst: "tan" }],
  ["sinh", { type: TokenTypes.Const, typst: "sinh" }],
  ["cosh", { type: TokenTypes.Const, typst: "cosh" }],
  ["tanh", { type: TokenTypes.Const, typst: "tanh" }],
  ["cot", { type: TokenTypes.Const, typst: "cot" }],
  ["sec", { type: TokenTypes.Const, typst: "sec" }],
  ["csc", { type: TokenTypes.Const, typst: "csc" }],
  ["arcsin", { type: TokenTypes.Const, typst: "arcsin" }],
  ["arccos", { type: TokenTypes.Const, typst: "arccos" }],
  ["arctan", { type: TokenTypes.Const, typst: "arctan" }],
  ["coth", { type: TokenTypes.Const, typst: "coth" }],
  ["sech", { type: TokenTypes.Const, typst: "sech" }],
  ["csch", { type: TokenTypes.Const, typst: "csch" }],
  ["exp", { type: TokenTypes.Const, typst: "exp" }],
  ["log", { type: TokenTypes.Const, typst: "log" }],
  ["ln", { type: TokenTypes.Const, typst: "ln" }],
  ["det", { type: TokenTypes.Const, typst: "det" }],
  ["dim", { type: TokenTypes.Const, typst: "dim" }],
  ["gcd", { type: TokenTypes.Const, typst: "gcd" }],
  ["lcm", { type: TokenTypes.Const, typst: "lcm" }],
  ["min", { type: TokenTypes.Const, typst: "min" }],
  ["max", { type: TokenTypes.Const, typst: "max" }],
  ["Sup", { type: TokenTypes.Const, typst: "sup" }],
  ["inf", { type: TokenTypes.Const, typst: "inf" }],
  ["mod", { type: TokenTypes.Const, typst: "mod" }],
  ["sgn", { type: TokenTypes.Const, typst: 'op("sgn")' }],
  ["abs", { type: TokenTypes.OperatorOA, typst: "abs($1)" }],
  ["norm", { type: TokenTypes.OperatorOA, typst: "norm($1)" }],
  ["floor", { type: TokenTypes.OperatorOA, typst: "floor($1)" }],
  ["ceil", { type: TokenTypes.OperatorOA, typst: "ceil($1)" }],
  ["uarr", { type: TokenTypes.Const, typst: "arrow.t" }],
  ["uparrow", { type: TokenTypes.Const, typst: "arrow.t" }],
  ["darr", { type: TokenTypes.Const, typst: "arrow.b" }],
  ["downarrow", { type: TokenTypes.Const, typst: "arrow.b" }],
  ["rarr", { type: TokenTypes.Const, typst: "arrow.r" }],
  ["rightarrow", { type: TokenTypes.Const, typst: "arrow.r" }],
  ["to", { type: TokenTypes.Const, typst: "arrow.r" }],
  ["->", { type: TokenTypes.Const, typst: "arrow.r" }],
  ["<-", { type: TokenTypes.Const, typst: "arrow.l" }],
  [">->", { type: TokenTypes.Const, typst: "arrow.r.tail" }],
  ["->>", { type: TokenTypes.Const, typst: "arrow.r.twohead" }],
  [">->>", { type: TokenTypes.Const, typst: "\u{2916}" }],
  ["|->", { type: TokenTypes.Const, typst: "mapsto" }],
  ["larr", { type: TokenTypes.Const, typst: "arrow.l" }],
  ["leftarrow", { type: TokenTypes.Const, typst: "arrow.l" }],
  ["harr", { type: TokenTypes.Const, typst: "arrow.l.r" }],
  ["rArr", { type: TokenTypes.Const, typst: "arrow.r.double" }],
  ["lArr", { type: TokenTypes.Const, typst: "arrow.left.double" }],
  ["hArr", { type: TokenTypes.Const, typst: "arrow.l.r.double" }],
  ["curvArrLt", { type: TokenTypes.Const, typst: "arrow.ccw.half" }],
  ["curvArrRt", { type: TokenTypes.Const, typst: "arrow.cw.half" }],
  ["circArrLt", { type: TokenTypes.Const, typst: "arrow.ccw" }],
  ["circArrRt", { type: TokenTypes.Const, typst: "arrow.cw" }],

  ["sqrt", { type: TokenTypes.OperatorOA, typst: "sqrt($1)" }],
  ["root", { type: TokenTypes.OperatorOAB, typst: "root($1, $2)" }],
  ["frac", { type: TokenTypes.OperatorOAB, typst: "frac($1, $2)" }],
  ["/", { type: TokenTypes.OperatorAOB, typst: "frac($1, $2)" }],
  ["choose", { type: TokenTypes.OperatorAOB, typst: "binom($1, $2)" }],
  ["_", { type: TokenTypes.OperatorSup, typst: "_($1)" }],
  ["^", { type: TokenTypes.OperatorSup, typst: "^($1)" }],
  // TODO
  ["stackrel", { type: TokenTypes.OperatorOAB, typst: "" }],
  // TODO
  ["overset", { type: TokenTypes.OperatorOAB, typst: "" }],
  // TODO
  ["underset", { type: TokenTypes.OperatorOAB, typst: "" }],
  ["hat", { type: TokenTypes.OperatorOA, typst: "hat($1)" }],
  ["\\`", { type: TokenTypes.OperatorOA, typst: "grave($1)" }],
  // TODO
  ["widehat", { type: TokenTypes.OperatorOA, typst: "hat($1)" }],
  // TODO
  ["Hat", { type: TokenTypes.OperatorOA, typst: "hat($1)" }],
  // TODO
  ["widetilde", { type: TokenTypes.OperatorOA, typst: "tilde($1)" }],
  ["ol", { type: TokenTypes.OperatorOA, typst: "\\overline{ $1 }" }],
  ["overline", { type: TokenTypes.OperatorOA, typst: "overline($1)" }],
  // TODO
  ["arc", { type: TokenTypes.OperatorOA, typst: "accent($1, paren.t)" }],
  ["bar", { type: TokenTypes.OperatorOA, typst: "bar($1)" }],
  // TODO
  ["vec", { type: TokenTypes.OperatorOA, typst: "accent($1, arrow.r)" }],
  ["Vec", { type: TokenTypes.OperatorOA, typst: "accent($1, arrow.r)" }],
  ["Aec", { type: TokenTypes.OperatorOA, typst: "accent($1, arrow.l)" }],
  // TODO
  ["tilde", { type: TokenTypes.OperatorOA, typst: "tilde($1)" }],
  ["Tilde", { type: TokenTypes.OperatorOA, typst: "tilde($1)" }],
  ["dot", { type: TokenTypes.OperatorOA, typst: "dot($1)" }],
  ["ddot", { type: TokenTypes.OperatorOA, typst: "dot.double($1)" }],
  ["ul", { type: TokenTypes.OperatorOA, typst: "underline($1)" }],
  ["underline", { type: TokenTypes.OperatorOA, typst: "underline($1))" }],
  ["underbrace", { type: TokenTypes.OperatorOA, typst: "underbrace($1)" }],
  ["ubrace", { type: TokenTypes.OperatorOA, typst: "underbrace($1)" }],
  ["overbrace", { type: TokenTypes.OperatorOA, typst: "overbrace($1)" }],
  ["obrace", { type: TokenTypes.OperatorOA, typst: "overbrace($1)" }],
  // TODO
  [
    "color",
    {
      type: TokenTypes.OperatorOAB,
      // TODO
      typst: '#text(color.rgb("$1".trim("{").trim("}")))[$$2$]',
      eatNext: true,
    },
  ],
  // TODO
  [
    "phantom",
    {
      type: TokenTypes.OperatorOA,
      typst: "#text(color.rgb(0, 0, 0, 0))[$$1$]",
    },
  ],
  ["text", { type: TokenTypes.OperatorOA, typst: "#[$1]", eatNext: true }],
  // TODO
  ["tex", { type: TokenTypes.OperatorOA, typst: "", eatNext: true }],
  // TODO
  ["mbox", { type: TokenTypes.OperatorOA, typst: "#[$1]" }],
  [
    "op",
    {
      type: TokenTypes.OperatorOA,
      typst: 'op("$1")',
      eatNext: true,
    },
  ],
  ["cancel", { type: TokenTypes.OperatorOA, typst: "cancel($1)" }],
  // TODO
  ["bb", { type: TokenTypes.OperatorOA, typst: "bold(#[$1])" }],
  // TODO
  ["mathbf", { type: TokenTypes.OperatorOA, typst: "bold(#[$1])" }],
  ["sf", { type: TokenTypes.OperatorOA, typst: "serif($1)" }],
  ["mathsf", { type: TokenTypes.OperatorOA, typst: "serif($1)" }],
  ["bbb", { type: TokenTypes.OperatorOA, typst: "bb($1)" }],
  ["mathbb", { type: TokenTypes.OperatorOA, typst: "bb($1)" }],
  ["cc", { type: TokenTypes.OperatorOA, typst: "cal($1)" }],
  ["mathcal", { type: TokenTypes.OperatorOA, typst: "cal($1)" }],
  ["tt", { type: TokenTypes.OperatorOA, typst: "mono($1)" }],
  ["mathtt", { type: TokenTypes.OperatorOA, typst: "mono($1)" }],
  ["fr", { type: TokenTypes.OperatorOA, typst: "frak($1)" }],
  ["bm", { type: TokenTypes.OperatorOA, typst: "bold($1)" }],
  // TODO
  ["rm", { type: TokenTypes.OperatorOA, typst: "serif($1)" }],
  // TODO
  ["scr", { type: TokenTypes.OperatorOA, typst: "scr($1)" }],
  // TODO
  ["limits", { type: TokenTypes.OperatorOA, typst: "" }],
  ["iint", { type: TokenTypes.Const, typst: "integral.double" }],
  ["iiint", { type: TokenTypes.Const, typst: "integral.triple" }],
  ["oiint", { type: TokenTypes.Const, typst: "integral.surf" }],
  ["oiiint", { type: TokenTypes.Const, typst: "integral.vol" }],
  ["laplace", { type: TokenTypes.Const, typst: "Delta" }],
  // TODO
  ["==", { type: TokenTypes.OperatorO2, typst: "" }],
  // TODO
  ["-->", { type: TokenTypes.OperatorO2, typst: "" }],
  ["||", { type: TokenTypes.Paren, typst: "bar.v" }],
  ["!||", { type: TokenTypes.Const, typst: "\u{2226}" }],
  ["S=", { type: TokenTypes.Const, typst: "tilde.rev.equiv" }],
  ["S~", { type: TokenTypes.Const, typst: "tilde.rev" }],
  ["!-=", { type: TokenTypes.Const, typst: "equiv.not" }],
  ["!|", { type: TokenTypes.Const, typst: "divides.not" }],
  ["!", { type: TokenTypes.OperatorAO, typst: "{$1 !}" }],
  ["!!", { type: TokenTypes.OperatorAO, typst: "{$1 !!}" }],
  ["!sube", { type: TokenTypes.Const, typst: "subset.eq.not" }],
  ["!supe", { type: TokenTypes.Const, typst: "supset.eq.not" }],
  ["subne", { type: TokenTypes.Const, typst: "subset.neq" }],
  ["supne", { type: TokenTypes.Const, typst: "supset.neq" }],
  ["lhd", { type: TokenTypes.Const, typst: "lt.tri" }],
  ["rhd", { type: TokenTypes.Const, typst: "gt.tri" }],
  ["normal", { type: TokenTypes.Const, typst: "lt.tri.eq" }],
  ["rnormal", { type: TokenTypes.Const, typst: "rt.tri.eq" }],

  // TODO
  ["hline", { type: TokenTypes.Const, typst: "" }],
  // TODO
  ["--", { type: TokenTypes.Const, typst: "" }],

  ["(", { type: TokenTypes.LParen, typst: "(" }],
  [")", { type: TokenTypes.RParen, typst: ")" }],
  ["[", { type: TokenTypes.LParen, typst: "[" }],
  ["]", { type: TokenTypes.RParen, typst: "]" }],
  ["{", { type: TokenTypes.LParen, typst: "{" }],
  ["}", { type: TokenTypes.RParen, typst: "}" }],
  ["(:", { type: TokenTypes.LParen, typst: "angle.l" }],
  [":)", { type: TokenTypes.RParen, typst: "angle.r" }],
  ["{:", { type: TokenTypes.LParen, typst: "." }],
  [":}", { type: TokenTypes.RParen, typst: "." }],
  // can be used as det or a single bar
  ["|", { type: TokenTypes.Paren, typst: "|" }],

  // ['"', { type: TokenTypes.Paren, typst: '\\text{ $1 }' }],

  ["&", { type: TokenTypes.Align, typst: "&" }],
  ["&&", { type: TokenTypes.Align, typst: "&&" }],
  [",", { type: TokenTypes.Split, typst: "," }],
  [";", { type: TokenTypes.Split, typst: ";" }],

  ["-", { type: TokenTypes.OperatorMinus, typst: "-$1 " }],
  ["+", { type: TokenTypes.OperatorMinus, typst: "+$1 " }],

  ["part", { type: TokenTypes.OperatorPartial, typst: "partial" }],
  ["pp", { type: TokenTypes.OperatorPartial, typst: "partial" }],
  ["dd", { type: TokenTypes.OperatorPartial, typst: "serif(d)" }],

  // TODO
  ["tiny", { type: TokenTypes.OperatorOA, typst: "$1" }],
  // TODO
  ["small", { type: TokenTypes.OperatorOA, typst: "$1" }],
  // TODO
  ["large", { type: TokenTypes.OperatorOA, typst: "$1" }],
  // TODO
  ["huge", { type: TokenTypes.OperatorOA, typst: "$1" }],
])

export { SYMBOLMAP, TokenTypes, type SymbolValueType }
